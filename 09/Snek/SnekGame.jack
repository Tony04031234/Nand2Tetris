// projects/09/snek/SnekGame.jack

/**
 * Implements the Snek game.
 */
class SnekGame {

    field Snek snek;

    // The snek's movement direction 
    field int direction; // 0=none,1=up,2=down,3=left,4=right
    field int speed; 
    field Array snacks;
    field int m_snackPtr;

    /** Constructs a new Snek Game. */
    constructor SnekGame new() {
        let snek = Snek.new(15);
        let direction = 0;
        let speed = 50;
        
        let snacks = Array.new(11);
        let snacks[0] = Segment.new(400,150,5,false,false, 0);
        let snacks[1] = Segment.new(100,100,5,false,false, 0);
        let snacks[2] = Segment.new(490,200,5,false,false, 0);
        let snacks[3] = Segment.new(25,140,5,false,false, 0);
        let snacks[4] = Segment.new(375,150,5,false,false, 0);
        let snacks[5] = Segment.new(10,180,5,false,false, 0);
        let snacks[6] = Segment.new(390,180,5,false,false, 0);
        let snacks[7] = Segment.new(25,85,5,false,false, 0);
        let snacks[8] = Segment.new(230,230,5,false,false, 0);
        let snacks[9] = Segment.new(495,30,5,false,false, 0);
        let snacks[10] = Segment.new(300,20,5,false,false, 0);
        let m_snackPtr = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do snek.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the snek's movement, direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        var int snackSpawnTimer;
        var boolean snackShown;
        var Segment currentSnack;
        var boolean boost;

        let exit = false;

        let snackSpawnTimer = 5;
        let snackShown = false;
        let boost = false;

        do Output.printString("Press any key to begin");
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }

        let direction = 4;
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 200, 30); // clear the text
 
        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSnek();
            }
    

            // TODO: MOVE THIS STUFF IN ABOVE WHILE LOOP SO THAT ITS RUNNING ISN'T DEPENDENT ON KEY PRESSES.
            if (snackSpawnTimer > 0) {
                let snackSpawnTimer = snackSpawnTimer - 1;
            }
            if (snackSpawnTimer = 0) {
                if (~snackShown) {
                    let currentSnack = snacks[m_snackPtr]; // obviously pick one from array
                    let m_snackPtr = m_snackPtr + 1;
                    do currentSnack.draw();                
                    do snek.setSnackSense(currentSnack.getX(), currentSnack.getY());
                    let snackShown = true;
                    let snackSpawnTimer = 10;
                } else {
                    do currentSnack.erase();
                    let snackShown = false;
                    let snackSpawnTimer = 5;
                }
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 90) {
                if (~boost) {
                    let speed = 20; // counterintuitively, lower speed val = faster
                    let boost = true;
                } else {
                    let speed = 50;
                    let boost = false;
                } 
            }
            if (key = 88) { //x DEBUG ONLY
                do snek.grow();
                do snek.grow();
                do snek.grow();
                do snek.grow();
                do snek.grow();
            } 
            if ((key = 131) & ~(direction = 2)) {
                let direction = 1;
            }
            if ((key = 133) & ~(direction = 1)) {
                let direction = 2;
            }
            if ((key = 130) & ~(direction = 4)) {
                let direction = 3;
            }
            if ((key = 132) & ~(direction = 3)) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSnek();
            }
        }
            
        return;
	}

    method void moveSnek() {
        if (direction = 1) {
            do snek.moveUp();
        }
        if (direction = 2) {
            do snek.moveDown();
        }
        if (direction = 3) {
            do snek.moveLeft();
        }
        if (direction = 4) {
            do snek.moveRight();
        }

        do Sys.wait(speed); // Delays the next movement.
        return;
    }
}
