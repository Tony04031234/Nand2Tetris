// projects/09/segment/Segment.jack

/**
 *  Implements a graphical Snek.
 *  The Snek is composed of n segments which take their movements
 *  from a queue of movements m_1...m_n, where m1 is the newest movement
 *  input from the user and m_n is the oldest. Segment_1 is the head of the
 *  Snek and segment_n is the tip of the tail. For each movement of the snek, 
 *  segment_i executes movement m_i, which could be either an input from the user
 *  or a 'NULL', indicating that the segment should continue moving in its previous 
 *  direction.
 */
class Snek {

    field Array m_segments;

    field int m_activeSegments;

    //field Array m_movements;

    constructor Snek new(int activeSegments) {
        var int i;
        let i = 0;
        let m_activeSegments = activeSegments;
        
        // set up segments
        let m_segments = Array.new(m_activeSegments);

        while (i < m_activeSegments) {
            let m_segments[i] = Segment.new((200-(10*i)),100, 10);
            let i = i + 1;
        }

        do draw();

        return this;
    }

    method void dispose() {
        // TODO: dispose of each segment and move
        do Memory.deAlloc(this);
        return;
    }

    /** Draws each segment in the snek on the screen. */
    method void draw() {
        var int i;
        var Segment tempSeg;
        let i = 0;

        while (i < m_activeSegments) {
            let tempSeg = m_segments[i];
            do tempSeg.draw();
            let i = i + 1;
        } 
        return;
    }

    method void moveUp() {
        var int i;
        var Segment tempSeg;
        let i = 0;

        while (i < m_activeSegments) {
            let tempSeg = m_segments[i];
            do tempSeg.moveUp();
            let i = i + 1;
        }
        return;
    }

    method void moveDown() {
        var int i;
        var Segment tempSeg;
        let i = 0;

        while (i < m_activeSegments) {
            let tempSeg = m_segments[i];
            do tempSeg.moveDown();
            let i = i + 1;
        }
        return;
    }

    method void moveLeft() {
        var int i;
        var Segment tempSeg;
        let i = 0;

        while (i < m_activeSegments) {
            let tempSeg = m_segments[i];
            do tempSeg.moveLeft();
            let i = i + 1;
        }
        return;
    }

    method void moveRight() {
        var int i;
        var Segment tempSeg;
        let i = 0;

        while (i < m_activeSegments) {
            let tempSeg = m_segments[i];
            do tempSeg.moveRight();
            let i = i + 1;
        }
        return;
    }

} // class Snek

