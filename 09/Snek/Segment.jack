// projects/09/segment/Segment.jack

/**
 * Implements a graphic segment. A graphic segment has a screen location
 * and a size. It also has methods for drawing, erasing, moving on the 
 * screen, and changing its size.
 */
class Segment {

    // Location on the screen
    field int x, y;

    // Whether the segment is a head (true) or tail (false)
    field bool m_isHead;

    // The size of the segment
    field int size;

    /** Constructs a new segment with a given location and size. */
    constructor Segment new(int Ax, int Ay, int Asize, bool isHead) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        let m_isHead = isHead;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Draws the segment on the screen. */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Erases the segment from the screen. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /** Increments the size by 2 pixels. */
    method void incSize() {
        if (((y + size) < 254) & ((x + size) < 510)) {
            do erase();
            let size = size + 2;
            do draw();
        }
        return;
    }

    /** Decrements the size by 2 pixels. */
    method void decSize() {
        if (size > 2) {
            do erase();
            let size = size - 2;
            do draw();
        }
        return;
	}

    /** Moves up by 2 pixels. */
    method void moveUp() {
        if (y > 1) {
            if (m_isHead) {
                do Screen.setColor(true);
            } else {
                do Screen.setColor(false);
            }
            let y = y - 10;
            do Screen.drawRectangle(x, y, x + size, y + 10);
        }
        return;
    }

    /** Moves down by 2 pixels. */
    method void moveDown() {
        if ((y + size + 10) < 254) {
            if (m_isHead) {
                do Screen.setColor(true);
            } else {
                do Screen.setColor(false);
            }
            let y = y + 10;
            do Screen.drawRectangle(x, (y + size) - 10, x + size, y + size);
        }
        return;
    }

    /** Moves left by 2 pixels. */
    method void moveLeft() {
        if (x > 1) {
            if (m_isHead) {
                do Screen.setColor(true);
            } else {
                do Screen.setColor(false);
            }
            let x = x - 10;
            do Screen.drawRectangle(x, y, x + 10, y + size);
        }
        return;
    }

    /** Moves right by 2 pixels. */
    method void moveRight() {
        if ((x + size) < 510) {
            if (m_isHead) {
                do Screen.setColor(true);
            } else {
                do Screen.setColor(false);
            }
            let x = x + 10;
            do Screen.drawRectangle((x + size) - 10, y, x + size, y + 10);
        }
        return;
    }
}
