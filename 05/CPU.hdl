// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// decide whether A is loaded from A-instruction or ALU output
	Mux16 (a = instruction, b = fromALU, sel = instruction[15], out = aMux);
	
	// decide what to load into A register
	Not (in = instruction[15], out = isAinstruction);
	And (a = instruction[15], b = instruction[5], out = loadALUout);
	Or (a = isAinstruction, b = loadALUout, out = loadA);
	ARegister (in = aMux, load = loadA, out = fromA, out[0..14] = addressM);
	
	// instruction[12] determines whether ALU input is A (0) or M (1)
	Mux16 (a = fromA, b = inM, sel = instruction[12], out = fromAM);
	
	// do we load D register?
	And (a = instruction[4], b = instruction[15], out = loadD);
	DRegister (in = fromALU, load = loadD, out = fromD);
	
	// determine ALU control bits
	ALU (x = fromD, y = fromAM, zx = instruction[11], nx = instruction[10],
								zy = instruction[9], ny = instruction[8],
								f = instruction[7], no = instruction[6],
								out = fromALU, out = outM, zr = ALUzero, ng = ALUnegative);
	
	// decide whether to out to M (instruction[3]);
	Not(in = instruction[3], out = notOutputM);
	Not(in = notOutputM, out = outToM);
	And (a = outToM, b = instruction[15], out = writeM);		// only write to M on C instructions
	
	// decide whether to jump	
	And (a = ALUnegative, b = instruction[2], out = jumpIfNeg);		// instruction[2] = jump if neg
	And (a = ALUzero, b = instruction[1], out = jumpIfZero);		// instruction[1] = jump if zero
	Or (a = ALUzero, b = ALUnegative, out = ALUnegOrpos);
	Not (in = ALUnegOrpos, out = ALUpositive);
	And (a = ALUpositive, b = instruction[0], out = jumpIfPos);		// instruction[0] = jump if pos
	Or (a = jumpIfNeg, b = jumpIfZero, out = jumpIfNegOrZero);
	Or (a = jumpIfNegOrZero, b = jumpIfPos, out = jumpConditions);
	And (a = jumpConditions, b = instruction[15], out = jump);		// only jump on C instructions
	
	// program counter
	PC (in = fromA, load = jump, inc = true, reset = reset, out[0..14] = pc);
}