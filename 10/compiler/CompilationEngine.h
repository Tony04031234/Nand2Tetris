/**   CompilationEngine.h
 *    Recursive top-down parser.
 *    matthew.james.bird@gmail.com
 */

#ifndef compilationEngine_h
#define compilationEngine_h

/** 
 *  Effects the actual compilation output. Gets its input from Tokeniser and
 *  emits its parsed struture into an output file. The output is generated by
 *  a series of compilexxx() routines, one for every syntactic element xxx of
 *  the Jack grammar. The contract between these routines is that each
 *  compilexxx() routine should read the syntactic construct xxx from the input,
 *  advance() the tokeniser exactly beyond xxx, and output the parsing of xxx.
 *  Thus, compilexxx() may only be called if indeed xxx is the next syntactic
 *  element of the input.
 */
class CompilationEngine {
public:
    CompilationEngine();
    ~CompilationEngine();

    void compileClass();

    /** Compiles static or field declaration */
    void compileClassVarDec();

    /** Compiles a complete method, function, or constructor */
    void compileSubroutine();

    /** Compiles a (poss. empty) parameter list, not including the '()' */
    void compileParameterList();

    /** Compiles a var declaration */
    void compileVarDec();
    
    /** Compiles a sequence of statements, not including the '{}' */
    void compileStatements();

    void compileDo();

    void compileLet();

    void compileWhile();

    void compileReturn();

    /** Compiles an if statement, possibly with a trailing 'else' clause */
    void compileIf();

    void compileExpression();

    /** Compiles a term. If the current token is an identifier, the routine
     *  must distinguish between a variable, an array entry, and a subroutine
     *  call. A single look-ahead token, which may be one of '[', '(', or '.'
     *  suffices to distinguish between the three possibilities (any other
     *  token is not part of this term and should be advanced over)
     */
    void compileTerm(); 

    /** Compiles a (possibly empty) comma-separated list of expressions */
    void compileExpressionList();

};

#endif // compilationEngine_h    
